---
description: 
globs: 
alwaysApply: false
---
# Component Guidelines

## General Guidelines

1. All components should be client-side rendered using the "use client" directive when they need interactivity
2. Components should be organized by feature in the `app/components/features` directory
3. Reusable UI components should be placed in `components/ui`
4. Layout components should be placed in `app/components/layout`

## Component Structure

1. Each component should:
   - Have a clear, single responsibility
   - Use TypeScript for type safety
   - Include proper prop types
   - Handle loading and error states
   - Be responsive and accessible

2. Feature components should:
   - Be placed in their respective feature directories
   - Handle their own state management
   - Use the appropriate API endpoints
   - Follow the application's design system

## State Management

1. Use React's built-in state management (useState, useEffect) for simple state
2. Keep state as close as possible to where it's used
3. Lift state up only when necessary for sharing between components
4. Use proper TypeScript types for all state variables

## API Integration

1. API calls should be made in dedicated service functions
2. Use proper error handling and loading states
3. Implement proper data validation using Zod schemas
4. Follow RESTful principles for API endpoints

## UI Components

1. Use the shadcn/ui component library for consistent styling
2. Follow the established design system
3. Ensure components are responsive
4. Implement proper accessibility features

## Type Safety

1. Use TypeScript for all components
2. Define proper interfaces for props
3. Use Zod for runtime validation
4. Export types from dedicated type files

## Performance

1. Implement proper code splitting
2. Use React.memo for expensive components
3. Optimize re-renders
4. Implement proper loading states

## Testing

1. Write unit tests for components
2. Test error states and edge cases
3. Ensure proper accessibility testing
4. Test component integration
